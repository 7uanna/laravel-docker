# nginx Configuration File
# http://wiki.nginx.org/Configuration

# Run as a less privileged user for security reasons.
#
# Defines user and group credentials used by worker processes.
# If group is omitted, a group whose name equals that of user is used.
user www-data;

# Determines whether nginx should become a daemon.
# Mainly used during development.
# daemon off;

# The maximum number of connections for Nginx is calculated by: (max_clients = worker_processes * worker_connections).
#
# Defines the number of worker processes.
worker_processes auto;

# Defines a file that will store the process ID of the main process.
# pid /var/run/nginx.pid;

# Maximum open file descriptors per process;
# should be > worker_connections.
#
# Changes the limit on the maximum number of open files (RLIMIT_NOFILE) for worker processes.
# Used to increase the limit without restarting the main process.
worker_rlimit_nofile 8192;

events {
    worker_connections 1024;
    multi_accept on;
    use epoll;
}

http {

    # Hide nginx version information.
    # Enables or disables emitting nginx version on error pages and in the "Server" response header field.
    server_tokens off;

    # Define the MIME types for files.
    include mime.types;
    default_type application/octet-stream;

    # Defines files that will be used as an index.
    index index.html index.php;

    log_format  main '$remote_addr - $remote_user [$time_local] "$request" '
                     '$status $body_bytes_sent "$http_referer" '
                     '"$http_user_agent" "$http_x_forwarded_for"';
    # Sets the path, format, and configuration for a buffered log write.
    # Several logs can be specified on the same level.
    # (this is only used when you don't override access_log on a server{} level).
    access_log /dev/stdout main;

    # Several logs can be specified on the same level.
    # If on the main configuration level writing a log to a file is not explicitly defined, the default file will be used.
    # The second parameter determines the level of logging, and can be one of the following: debug, info, notice, warn, error, crit, alert, or emerg.
    #
    # (this is only used when you don't override error_log on a server{} level)
    error_log /dev/stderr;

    # Define um limite de tempo durante o qual uma conexão de cliente keep-alive vai ficar aberta no servidor.
    #     O valor zero desativa conexões keep-alive com cliente.
    #
    # The keepalive_timeout assigns the timeout for keep-alive connections with the client.
    # Simply put, Nginx will close connections with the client after this period of time.
    #
    # Keepalive connections allow to reuse the same TCP connection for multiple HTTP requests.
    keepalive_timeout 65s;

    # Sets buffer size for reading client request body.
    # In case the request body is larger than the buffer, the whole body or only its part is written to a temporary file.
    client_body_buffer_size 1m;

    # Sets the maximum allowed size of the client request body, specified in the “Content-Length” request header field.
    # If the size in a request exceeds the configured value, the 413 (Request Entity Too Large) error is returned to the client.
    client_max_body_size 10m;

    # Speed up file transfers by using sendfile() to copy directly between descriptors rather than using read()/write().
    #
    # Sendfile copies data between one FD and other from within the kernel.
    sendfile on;

    # Tell Nginx not to send out partial frames; this increases throughput since TCP frames are filled up before being sent out. (adds TCP_CORK).
    #
    # Tcp_nopush causes nginx to attempt to send its HTTP response head in one packet, instead of using partial frames.
    # This is useful for prepending headers before calling sendfile, or for throughput optimization.
    # Send headers in one peace, its better then sending them one by one.
    tcp_nopush on;

    add_header X-Frame-Options SAMEORIGIN;
    add_header X-Content-Type-Options nosniff;
    add_header X-XSS-Protection "1; mode=block";

    ################
    ## Gzip Settings
    ################

    # Enable gzipping compressed of responses.
    gzip on;

    # Sets a gzip compression level of a response. Acceptable values are in the range from 1 to 9.
    gzip_comp_level 5;

    # Sets the minimum length of a response that will be gzipped.
    # The length is determined only from the “Content-Length” response header field.
    gzip_min_length 256;

    # Enables or disables gzipping of responses for proxied requests depending on the request and response.
    # The fact that the request is proxied is determined by the presence of the “Via” request header field.
    gzip_proxied any;

    # Enables or disables inserting the “Vary: Accept-Encoding” response header field if the directives gzip, gzip_static, or gunzip are active.
    gzip_vary on;

    # Compress all output labeled with one of the following MIME-types.
    #
    # Enables gzipping of responses for the specified MIME types in addition to “text/html”.
    # The special value “*” matches any MIME type.
    #
    # (Responses with the “text/html” type are always compressed).
    gzip_types
        application/atom+xml
        application/javascript
        application/json
        application/rss+xml
        application/vnd.ms-fontobject
        application/x-font-ttf
        application/x-web-app-manifest+json
        application/xhtml+xml
        application/xml
        font/opentype
        image/svg+xml
        image/x-icon
        text/css
        text/xml
        text/plain
        text/javascript
        text/x-component;

    #########
    # SERVERS
    #########

    include /etc/nginx/conf.d/*.conf;
}
