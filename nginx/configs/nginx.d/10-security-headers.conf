# HSTS is used to force browsers to only connect using HTTPS.
# Declare that a website is only accessible over a secure connection (HTTPS).
#
# Force client-side SSL redirection.
#
# If a user types `example.com` in their browser, even if the server
# redirects them to the secure version of the website, that still leaves
# a window of opportunity (the initial HTTP connection) for an attacker
# to downgrade or redirect the request.
#
# The following header ensures that browser will ONLY connect to your
# server via HTTPS, regardless of what the users type in the browser's address bar.
#
# The HTTP Strict-Transport-Security response header (often abbreviated as HSTS) lets a web site tell browsers that it should only be accessed using HTTPS, instead of using HTTP.
# HSTS (ngx_http_headers_module is required) (15768000 seconds = 6 months)
# test: https://hstspreload.org/
more_set_headers 'Strict-Transport-Security: max-age=31536000; includeSubDomains; preload';

# An HTTP header which indicates whether the browser should allow the webpage to be displayed in a frame within another webpage.
# Used as a defense against clickjacking attacks.
#
# Config to don't allow the browser to render the page inside an frame or iframe and avoid clickjacking http://en.wikipedia.org/wiki/Clickjacking
#
# If you need to allow [i]frames, you can use SAMEORIGIN or even set an uri with ALLOW-FROM uri.
more_set_headers 'X-Frame-Options: SAMEORIGIN';

# Prevent some browsers from MIME-sniffing the response.
# When serving user-supplied content, include a X-Content-Type-Options: nosniff header along with the Content-Type: header, to disable content-type sniffing on some browsers.
#
# O header de resposta HTTP X-Content-Type-Options é um marcador usado pelo servidor para indicar que os MIME types enviados pelos headers Content-Type não devem ser alterados e seguidos.
# Isto permite que o usuário opte por não participar do chamado MIME Type Sniffing ou, em outras palavras, é uma forma de dizer que os webmasters estão vendo o que você está fazendo.
#
# note: nosniff só se aplica para tipos "script" e "style".
more_set_headers 'X-Content-Type-Options: nosniff';

# The HTTP X-XSS-Protection response header is a feature of Internet Explorer, Chrome and Safari that stops pages from loading when they detect reflected cross-site scripting (XSS) attacks.
#
# Although these protections are largely unnecessary in modern browsers when sites implement a strong Content-Security-Policy that disables the use of inline JavaScript ('unsafe-inline'),
# they can still provide protections for users of older web browsers that don't yet support CSP.
more_set_headers 'X-XSS-Protection: 1; mode=block';

# Mitigate cross-site scripting attacks by whitelisting allowed sources of script, style, and other resources.
#
# This can be done by setting a `Content Security Policy` which whitelists trusted sources of content for your website.
#
# Prevent XSS, clickjacking, code injection attacks by implementing Content Security Policy (CSP) header in your web page HTTP response.
# CSP instruct browser to load allowed content to load on the website.
#
# To make things easier, you can use an online CSP header generator such as: https://www.cspisawesome.com/
# To check: https://cspvalidator.org/ or https://csp-evaluator.withgoogle.com/
more_set_headers "Content-Security-Policy: default-src 'self'; base-uri 'none'; child-src 'none'; form-action 'none'; style-src 'self' https://fonts.googleapis.com; font-src 'self' https://cdnjs.cloudflare.com https://fonts.gstatic.com https://fonts.googleapis.com; block-all-mixed-content; upgrade-insecure-requests; report-uri /csp/report;";

# Allow control of HTTP referrers via the referrer meta tag.
#
# A web application uses HTTPS and a URL-based session identifier.
# The web application might wish to link to HTTPS resources on other
# web sites without leaking the user's session identifier in the URL.
#
# This can be done by setting a `Referrer Policy` which
# whitelists trusted sources of content for your website.
#
# To check your referrer policy, you can use an online service
# such as: https://securityheaders.io/
#
# https://scotthelme.co.uk/a-new-security-header-referrer-policy/
# https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Referrer-Policy
more_set_headers 'Referrer-Policy: no-referrer-when-downgrade';

# Feature policy is a web platform API which gives a website the ability to allow or block the use of browser features in its own frame or in iframes that it embeds.
more_set_headers "Feature-Policy: accelerometer 'none'; camera 'none'; magnetometer 'none'; microphone 'none'; payment 'none'; usb 'none'; encrypted-media 'none'; fullscreen 'self'; midi 'none';";

# MISS = This is a cache MISS because the file has not been requested before. Therefore the Cache server needed to proxy the request to the Origin Server to get the resource.
# HIT = The Expires header remains unchanged, as Nginx simply returned the resource from it's cache. Those headers will update the next time the Cache Server goes back to the Origin Server to get a fresh copy of the file.
# BYPASS = The proxy_cache_bypass directive will inform Nginx to honor the Cache-Control header in HTTP requests.
# note: adds a HTTP response header "X-Cache" returning HIT/MISS/BYPASS/EXPIRED for cache use status
more_set_headers 'X-Cache: $upstream_cache_status - $scheme://$host:$request_method:$request_uri';

# more_set_headers 'X-Robots-Tag: none';
more_set_headers 'X-Download-Options: noopen';
more_set_headers 'X-Permitted-Cross-Domain-Policies: none';
