version: '3.7'

networks:
    NetworkApp:
        driver: bridge
        name: NetworkApp
        ipam:
            driver: default
            config:
                - subnet: 172.31.0.0/16
    # NetworkTraefik:
    #     driver: overlay
    #     name: NetworkTraefik

volumes:
    mySQLData:
    mongoDBData:
    redisData:
    localBindApp:
        driver: local
        driver_opts:
            type: none
            device: $PWD/${LOCAL_SRC}
            o: bind

services:

    # traefik:
    #     image: traefik:1.7-alpine
    #     hostname: traefik
    #     container_name: traefik
    #     # command: |
    #     #     - "--configFile=/traefik.toml"
    #     labels:
    #         traefik.enable: "true"
    #         traefik.backend: "traefik"
    #         traefik.frontend.rule: "Host:traefik.${DOMAIN_APP}"
    #         traefik.port: "8099"
    #     expose:
    #         # Traefik dashboard port
    #         - 8099
    #     ports:
    #         - target: 80
    #           published: 80
    #           protocol: tcp
    #         - target: 443
    #           published: 443
    #           protocol: tcp
    #     volumes:
    #         - ./nginx/certs/:/certs/:ro
    #         - ./traefik/traefik.toml:/traefik.toml:ro
    #         - /var/run/docker.sock:/var/run/docker.sock:ro
    #     restart: on-failure
    #     networks:
    #         NetworkTraefik:

    # whoami:
    #     hostname: whoami
    #     container_name: whoami
    #     image: containous/whoami
    #     labels:
    #         traefik.enable: true
    #         traefik.frontend.rule: "Host:whoami.${DOMAIN_APP}"
    #     networks:
    #         NetworkTraefik:

    # # redis-cli -h 127.0.0.1 -p 63781 -a 'HQD3{9S-u(qnxK@'
    redis:
        image: redis:5-alpine
        hostname: redis
        container_name: redis
        ports:
            - "63781:6379"
        volumes:
            - ./redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
            - redisData:/data
        command: ["redis-server", "/usr/local/etc/redis/redis.conf", "--appendonly", "yes"]
        restart: on-failure
        networks:
            NetworkApp:
                ipv4_address: 172.31.1.2
        healthcheck:
            test: ["CMD-SHELL", "redis-cli -h 127.0.0.1 -p 6379 -a 'HQD3{9S-u(qnxK@' --no-auth-warning PING"]
            interval: 10s
            timeout: 5s
            retries: 5

    # # mysql -h 127.0.0.1 -P 30061 -uapp -p'TxdITs=CgN9e7+p' \
    # #     --ssl-ca=mysql/ssl/ca.pem \
    # #     --ssl-cert=mysql/ssl/client-cert.pem \
    # #     --ssl-key=mysql/ssl/client-key.pem
    database:
        image: mysql:5.7
        hostname: database
        container_name: database
        command: ["mysqld"]
        volumes:
            - ./mysql/ssl/ca.pem:/etc/mysql-ssl/ca.pem:ro
            - ./mysql/ssl/server-cert.pem:/etc/mysql-ssl/server-cert.pem:ro
            - ./mysql/ssl/server-key.pem:/etc/mysql-ssl/server-key.pem:ro
            - ./mysql/my.cnf:/etc/mysql/conf.d/my.cnf:ro
            - mySQLData:/var/lib/mysql
        env_file:
            - ./mysql/mysql.env
        ports:
            - "30061:3306"
        restart: on-failure
        networks:
            NetworkApp:
                ipv4_address: 172.31.1.3
        healthcheck:
            test: "export MYSQL_PWD='5?qqSm3_@mqrJ_'; mysqladmin -h 127.0.0.1 -P 3306 --user=root --silent ping"
            interval: 10s
            timeout: 5s
            retries: 3

    # # mongo --ssl \
    # #       --sslCAFile ./mongodb/ssl/rootCA.pem --sslPEMKeyFile ./mongodb/ssl/client.pem \
    # #       --host 127.0.0.1 --port 29019 -u 'root' -p 'Y601=lN!JbL6yj18' --authenticationDatabase admin
    # # @see https://medium.com/@rajanmaharjan/secure-your-mongodb-connections-ssl-tls-92e2addb3c89
    mongodb:
        image: mongo:4.1
        hostname: mongodb
        container_name: mongodb
        command: ["mongod", "--config", "/etc/mongo/mongod.conf"]
        ports:
            - "29019:27017"
        volumes:
            - ./mongodb/mongod.conf:/etc/mongo/mongod.conf:ro
            - ./mongodb/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
            - ./mongodb/ssl/rootCA.pem:/etc/ssl/ca.pem:ro
            - ./mongodb/ssl/server.pem:/etc/ssl/server.pem:ro
            - mongoDBData:/data/db
        environment:
            MONGO_INITDB_ROOT_USERNAME: root
            MONGO_INITDB_ROOT_PASSWORD: Y601=lN!JbL6yj18
        restart: on-failure
        networks:
            NetworkApp:
                ipv4_address: 172.31.1.4

    webserver:
        image: ${WEBSERVER_IMAGE}
        hostname: webserver
        container_name: webserver
        build:
            context: ./nginx
            dockerfile: Dockerfile
            args:
                DOMAIN_APP: ${DOMAIN_APP}
                APP_PATH_PREFIX: ${APP_PATH_PREFIX}
        environment:
            ONLY_APP: "true"
            DOMAIN_APP: ${DOMAIN_APP}
            APP_PATH_PREFIX: ${APP_PATH_PREFIX}
        ports:
            - "${PORT_HTTP}:80"
            - "${PORT_HTTPS}:443"
        labels:
            - traefik.enable=true
            - traefik.frontend.rule=Host:www.${DOMAIN_APP}
        networks:
            NetworkApp:
                ipv4_address: 172.31.1.5
        depends_on:
            - app
        restart: unless-stopped
        # ulimits:
        #     memlock:
        #         soft: -1
        #         hard: -1
        #     nofile:
        #         soft: 32768
        #         hard: 65535
        working_dir: ${REMOTE_SRC}
        # volumes:
        #     - type: volume
        #       source: localBindApp
        #       target: ${REMOTE_SRC}
        links:
            - "app:php-fpm"

    # # docker-compose exec app php artisan key:generate
    # # docker-compose exec app php artisan migrate --seed
    app:
        image: ${APP_IMAGE}
        hostname: app
        container_name: app
        build:
            context: ${LOCAL_SRC}
            dockerfile: ${DOCKER_FOLDER_PATH}/app/Dockerfile
            args:
                DOMAIN_APP: ${DOMAIN_APP}
                APP_PATH_PREFIX: ${APP_PATH_PREFIX}
                DOCKER_FOLDER_PATH: ${DOCKER_FOLDER_PATH}
        working_dir: ${REMOTE_SRC}
            # When you set the same environment variable in multiple files, hereâ€™s the priority used by Compose to choose which value to use:
            # 1. Compose file
            # 2. Shell environment variables
            # 3. Environment file
            # 4. Dockerfile
            # 5. Variable is not defined
        env_file:
            - ./app/app.env
        ports:
            - "9001:9001"
            - "8081:8080"
        environment:
            REMOTE_SRC: ${REMOTE_SRC}
            PROJECT_ENVIRONMENT: ${PROJECT_ENVIRONMENT}
        depends_on: ['redis', 'database']
        # ulimits:
        #     memlock:
        #         soft: -1
        #         hard: -1
        #     nofile:
        #         soft: 32768
        #         hard: 65535
        # volumes:
            # # Used [:delegated] or [:cached] mode here on docker for MAC for faster disk I/O
            # - ${LOCAL_SRC}:${REMOTE_SRC}:delegated
            # - ./app/config/php.ini-production.ini:/usr/local/etc/php/php.ini:ro
            # - ./app/config/extensions/opcache.ini:/usr/local/etc/php/conf.d/docker-php-ext-opcache.ini
            # - ./app/config/extensions/xdebug.ini:/usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini
        networks:
            NetworkApp:
                ipv4_address: 172.31.1.6
        tty: true
        stdin_open: true
        restart: unless-stopped
        dns:
            - 8.8.8.8
            - 8.8.4.4

    queue:
        image: ${APP_QUEUE_IMAGE}
        hostname: queue
        container_name: queue
        env_file:
            - ./queue/queue.env
        environment:
            REMOTE_SRC: ${REMOTE_SRC}
            PROJECT_ENVIRONMENT: ${PROJECT_ENVIRONMENT}
            LARAVEL_QUEUE_MANAGER: ${LARAVEL_QUEUE_MANAGER}
        working_dir: ${REMOTE_SRC}
        ports:
            - "8082:8080"
        depends_on: ['redis', 'database']
        # volumes:
        #     - ${LOCAL_SRC}:${REMOTE_SRC}:delegated
        networks:
            NetworkApp:
                ipv4_address: 172.31.1.7
        restart: on-failure

    scheduler:
        image: ${APP_SCHEDULER_IMAGE}
        hostname: scheduler
        container_name: scheduler
        env_file:
            - ./scheduler/scheduler.env
        environment:
            REMOTE_SRC: ${REMOTE_SRC}
        working_dir: ${REMOTE_SRC}
        ports:
            - "8083:8080"
        depends_on: ['redis', 'database']
        # volumes:
        #     - ${LOCAL_SRC}:${REMOTE_SRC}:delegated
        networks:
            NetworkApp:
                ipv4_address: 172.31.1.8
        restart: on-failure
